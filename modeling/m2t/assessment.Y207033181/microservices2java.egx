pre{
	var folderGen = "/src-gen/main/java/assessment/";
	var resourcesFolder = "/src/main/resources/";
}

rule Application
transform microservice : Microservice {
	template : "microservice/Application.egl"
	parameters : Map{
		"microservice" = microservice
	}
	target : microservice.name.toLowerCase() + folderGen + "Application.java"
}
	
rule Controllers
transform controller : Controller {
	template : "microservice/Controllers.egl"
	parameters : Map{
		"controller" = controller,
		"microservice" = controller.eContainer()
	}
	target : controller.eContainer().name.toLowerCase() + folderGen + "controllers/" +  controller.name +  ".java"
}
	
rule Domain
transform data : Repo {
	template : "microservice/Domain.egl"
	parameters : Map{
		"data" = data
	}
	target : data.eContainer().name.toLowerCase() + folderGen + "domain/" +  data.name +  ".java"
}

rule DTO
transform data : Repo {
	template : "microservice/DTO.egl"
	parameters : Map{
		"data" = data
	}
	target : data.eContainer().name.toLowerCase() + folderGen + "dto/" +  data.name +  "DTO.java"
}

rule Repository
transform data : Repo {
	template : "microservice/Repository.egl"
	parameters : Map{
		"data" = data
	}
	target : data.eContainer().name.toLowerCase() + folderGen + "repositories/" +  data.name +  "Repository.java"
}

rule Producers
transform microservice : Microservice {
	template : "microservice/Producers.egl"
	parameters : Map{
		"model" = microservice.eContainer(),
		"microservice" = microservice
	}
	target : microservice.name.toLowerCase() + folderGen + "events/"  + "Producers.java"
}

rule DebugConsumers
transform microservice : Microservice {
	template : "microservice/DebugConsumers.egl"
	parameters : Map{
		"model" = microservice.eContainer(),
		"microservice" = microservice
	}
	target : microservice.name.toLowerCase() + folderGen + "events/"  + "DebugConsumers.java"
}

rule Consumers
transform microservice : Microservice {
	guard : microservice.consumers.size() > 0 
	template : "microservice/Consumers.egl"
	parameters : Map{
		"microservice" = microservice
	}
	target : microservice.name.toLowerCase() + folderGen + "events/"  + "Consumers.java"
}

rule Streams
transform microservice : Microservice {
	template : "microservice/Streams.egl"
	parameters : Map{
		"model" = microservice.eContainer(),
		"microservice" = microservice
	}
	target : microservice.name.toLowerCase() + folderGen + "events/"  + "Streams.java"
}

rule WindowedIdentifier
transform microservice : Microservice {
	template : "microservice/WindowedIdentifier.egl"
	parameters : Map{
		"microservice" = microservice
	}
	target : microservice.name.toLowerCase() + folderGen + "events/"  + "WindowedIdentifier.java"
}

rule applicationResources
transform microservice : Microservice {
	template : "resources/applicationResources.egl"
	parameters : Map{
		"model" = microservice.eContainer(),
		"microservice" = microservice
	}
	target : microservice.name.toLowerCase() + resourcesFolder + "application.yml"
}

rule logbackResources
transform microservice : Microservice {
	template : "resources/logbackResources.egl"
	parameters : Map{
		"microservice" = microservice
	}
	target : microservice.name.toLowerCase() + resourcesFolder + "logback.xml"
}

rule gradleBuild
transform microservice : Microservice {
	template : "toplevel/gradleBuild.egl"
	parameters : Map{
		"microservice" = microservice
	}
	target : microservice.name.toLowerCase() + "/build.gradle"
}

rule gradleProperties
transform microservice : Microservice {
	template : "toplevel/gradleProperties.egl"
	parameters : Map{
		"microservice" = microservice
	}
	target : microservice.name.toLowerCase() + "/gradle.properties"
}

rule gradleSettings
transform microservice : Microservice {
	template : "toplevel/gradleSettings.egl"
	parameters : Map{
		"microservice" = microservice
	}
	target : microservice.name.toLowerCase() + "/settings.gradle"
}

rule micronautCli
transform microservice : Microservice {
	template : "toplevel/micronautCli.egl"
	parameters : Map{
		"microservice" = microservice
	}
	target : microservice.name.toLowerCase() + "/micronaut-cli.yml"
}
